{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/fire/fesm2022/angular-fire-remote-config.mjs", "../../../../../node_modules/@firebase/remote-config/dist/esm/index.esm2017.js", "../../../../../node_modules/rxfire/remote-config/index.esm.js"],
  "sourcesContent": ["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵisSupportedError as _isSupportedError, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isSupported as isSupported$1, activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n}\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\nclass RemoteConfigInstances {\n  constructor() {\n    return _getAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n}\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\nconst isRemoteConfigSupportedValueSymbol = '__angularfire_symbol__remoteConfigIsSupportedValue';\nconst isRemoteConfigSupportedPromiseSymbol = '__angularfire_symbol__remoteConfigIsSupported';\nglobalThis[isRemoteConfigSupportedPromiseSymbol] ||= isSupported$1().then(it => globalThis[isRemoteConfigSupportedValueSymbol] = it).catch(() => globalThis[isRemoteConfigSupportedValueSymbol] = false);\nconst isRemoteConfigSupportedFactory = {\n  async: () => globalThis[isRemoteConfigSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isRemoteConfigSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(_isSupportedError('RemoteConfig'));\n    }\n    return ret;\n  }\n};\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n  if (!isRemoteConfigSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultRemoteConfig = _getDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!isRemoteConfigSupportedFactory.sync()) {\n      return null;\n    }\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp]\n};\nclass RemoteConfigModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'rc');\n  }\n  static ɵfac = function RemoteConfigModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RemoteConfigModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RemoteConfigModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: isRemoteConfigSupportedFactory.async,\n      multi: true\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RemoteConfigModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: isRemoteConfigSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], () => [], null);\n})();\nfunction provideRemoteConfig(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'rc');\n  return makeEnvironmentProviders([DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: isRemoteConfigSupportedFactory.async,\n    multi: true\n  }, {\n    provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n    useFactory: remoteConfigInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getValueChanges = _zoneWrap(getValue$1, true);\nconst getStringChanges = _zoneWrap(getString$1, true);\nconst getNumberChanges = _zoneWrap(getNumber$1, true);\nconst getBooleanChanges = _zoneWrap(getBoolean$1, true);\nconst getAllChanges = _zoneWrap(getAll$1, true);\nconst isSupported = isRemoteConfigSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst activate = _zoneWrap(activate$1, true);\nconst ensureInitialized = _zoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = _zoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = _zoneWrap(fetchConfig$1, true);\nconst getAll = _zoneWrap(getAll$2, true);\nconst getBoolean = _zoneWrap(getBoolean$2, true);\nconst getNumber = _zoneWrap(getNumber$2, true);\nconst getRemoteConfig = _zoneWrap(getRemoteConfig$1, true);\nconst getString = _zoneWrap(getString$2, true);\nconst getValue = _zoneWrap(getValue$2, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel };\n", "import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nconst name = \"@firebase/remote-config\";\nconst version = \"0.4.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nclass RemoteConfigAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RC_COMPONENT_NAME = 'remote-config';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERROR_DESCRIPTION_MAP = {\n  [\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\n  [\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\n  [\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\n  [\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\n  [\"storage-open\" /* ErrorCode.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\" /* ErrorCode.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\" /* ErrorCode.STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\" /* ErrorCode.STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [\"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */]: 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status\" /* ErrorCode.FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser'\n};\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\n// Note how this is like typeof/instanceof, but for ErrorCode.\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\nclass Value {\n  constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\n    this._source = _source;\n    this._value = _value;\n  }\n  asString() {\n    return this._value;\n  }\n  asBoolean() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n  asNumber() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n  getSource() {\n    return this._source;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\nfunction getRemoteConfig(app = getApp()) {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\nasync function activate(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n  if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n  return true;\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\nfunction ensureInitialized(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\nasync function fetchConfig(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */) ? 'throttle' : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\nfunction getAll(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\nfunction getValue(remoteConfig, key) {\n  const rc = getModularInstance(remoteConfig);\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(`Returning static value for key \"${key}\".` + ' Define a default or remote value if this is unintentional.');\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\nfunction setLogLevel(remoteConfig, logLevel) {\n  const rc = getModularInstance(remoteConfig);\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\nclass CachingClient {\n  constructor(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n  isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + ` Cache age millis: ${cacheAgeMillis}.` + ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` + ` Is cache hit: ${isCachedDataFresh}.`);\n    return isCachedDataFresh;\n  }\n  async fetch(request) {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]);\n    // Exits early on cache hit.\n    if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n      return lastSuccessfulFetchResponse;\n    }\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n    // Fetch throws for non-success responses, so success is guaranteed here.\n    const storageOperations = [\n    // Uses write-through cache for consistency with synchronous public API.\n    this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n    }\n    await Promise.all(storageOperations);\n    return response;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\nfunction getUserLanguage(navigatorLanguage = navigator) {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\nclass RestClient {\n  constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n  async fetch(request) {\n    const [installationId, installationToken] = await Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);\n    const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n    const requestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = \"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */;\n      if ((originalError === null || originalError === void 0 ? void 0 : originalError.name) === 'AbortError') {\n        errorCode = \"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n      });\n    }\n    let status = response.status;\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n    let config;\n    let state;\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */, {\n          originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(\"fetch-status\" /* ErrorCode.FETCH_STATUS */, {\n        httpStatus: status\n      });\n    }\n    return {\n      status,\n      eTag: responseEtag,\n      config\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */, {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\nclass RetryingClient {\n  constructor(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n  async fetch(request) {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n    return this.attemptFetch(request, throttleMetadata);\n  }\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n  async attemptFetch(request, {\n    throttleEndTimeMillis,\n    backoffCount\n  }) {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n    try {\n      const response = await this.client.fetch(request);\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\nclass RemoteConfig {\n  constructor(\n  // Required by FirebaseServiceFactory interface.\n  app,\n  // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n  get fetchTimeMillis() {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n  get lastFetchStatus() {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\nfunction toFirebaseError(event, errorCode) {\n  const originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError === null || originalError === void 0 ? void 0 : originalError.message)\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n// Visible for testing.\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, \"storage-open\" /* ErrorCode.STORAGE_OPEN */));\n      };\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* ErrorCode.STORAGE_OPEN */, {\n        originalErrorMessage: error === null || error === void 0 ? void 0 : error.message\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\nclass Storage {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n  getLastFetchStatus() {\n    return this.get('last_fetch_status');\n  }\n  setLastFetchStatus(status) {\n    return this.set('last_fetch_status', status);\n  }\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.get('last_successful_fetch_timestamp_millis');\n  }\n  setLastSuccessfulFetchTimestampMillis(timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  }\n  getLastSuccessfulFetchResponse() {\n    return this.get('last_successful_fetch_response');\n  }\n  setLastSuccessfulFetchResponse(response) {\n    return this.set('last_successful_fetch_response', response);\n  }\n  getActiveConfig() {\n    return this.get('active_config');\n  }\n  setActiveConfig(config) {\n    return this.set('active_config', config);\n  }\n  getActiveConfigEtag() {\n    return this.get('active_config_etag');\n  }\n  setActiveConfigEtag(etag) {\n    return this.set('active_config_etag', etag);\n  }\n  getThrottleMetadata() {\n    return this.get('throttle_metadata');\n  }\n  setThrottleMetadata(metadata) {\n    return this.set('throttle_metadata', metadata);\n  }\n  deleteThrottleMetadata() {\n    return this.delete('throttle_metadata');\n  }\n  async get(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-get\" /* ErrorCode.STORAGE_GET */));\n        };\n        request.onsuccess = event => {\n          const result = event.target.result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-get\" /* ErrorCode.STORAGE_GET */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  async set(key, value) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-set\" /* ErrorCode.STORAGE_SET */));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-set\" /* ErrorCode.STORAGE_SET */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  async delete(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-delete\" /* ErrorCode.STORAGE_DELETE */));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-delete\" /* ErrorCode.STORAGE_DELETE */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\nclass StorageCache {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n  getLastFetchStatus() {\n    return this.lastFetchStatus;\n  }\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n  getActiveConfig() {\n    return this.activeConfig;\n  }\n  /**\r\n   * Read-ahead getter\r\n   */\n  async loadFromStorage() {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n  /**\r\n   * Write-through setters\r\n   */\n  setLastFetchStatus(status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n  setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n  setActiveConfig(activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function remoteConfigFactory(container, {\n    instanceIdentifier: namespace\n  }) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations-internal').getImmediate();\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */);\n    }\n    // Normalizes optional inputs.\n    const {\n      projectId,\n      apiKey,\n      appId\n    } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */);\n    }\n    namespace = namespace || 'firebase';\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n    const logger = new Logger(name);\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = LogLevel.ERROR;\n    const restClient = new RestClient(installations,\n    // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\nasync function fetchAndActivate(remoteConfig) {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\nasync function isSupported() {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\r\n * The Firebase Remote Config Web SDK.\r\n * This SDK does not work in a Node.js environment.\r\n *\r\n * @packageDocumentation\r\n */\n/** register component and version */\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };\n", "import { Observable } from 'rxjs';\nimport { ensureInitialized, getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'firebase/remote-config';\nfunction parameter$(_a) {\n  var remoteConfig = _a.remoteConfig,\n    key = _a.key,\n    getter = _a.getter;\n  return new Observable(function (subscriber) {\n    ensureInitialized(remoteConfig).then(function () {\n      // 'this' for the getter loses context in the next()\n      // call, so it needs to be bound.\n      var boundGetter = getter.bind(remoteConfig);\n      subscriber.next(boundGetter(remoteConfig, key));\n    });\n  });\n}\nfunction getValue(remoteConfig, key) {\n  var getter = getValue$1;\n  return parameter$({\n    remoteConfig: remoteConfig,\n    key: key,\n    getter: getter\n  });\n}\nfunction getString(remoteConfig, key) {\n  var getter = getString$1;\n  return parameter$({\n    remoteConfig: remoteConfig,\n    key: key,\n    getter: getter\n  });\n}\nfunction getNumber(remoteConfig, key) {\n  var getter = getNumber$1;\n  return parameter$({\n    remoteConfig: remoteConfig,\n    key: key,\n    getter: getter\n  });\n}\nfunction getBoolean(remoteConfig, key) {\n  var getter = getBoolean$1;\n  return parameter$({\n    remoteConfig: remoteConfig,\n    key: key,\n    getter: getter\n  });\n}\nfunction getAll(remoteConfig) {\n  var getter = getAll$1;\n  // No key is needed for getAll()\n  return parameter$({\n    remoteConfig: remoteConfig,\n    key: '',\n    getter: getter\n  });\n}\nexport { getAll, getBoolean, getNumber, getString, getValue };\n"],
  "mappings": "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",
  "names": ["import_rxjs", "getValue", "getString", "getNumber", "getBoolean", "getAll", "RemoteConfig", "getValue", "getString", "getNumber", "getBoolean", "getAll", "isSupported", "activate", "ensureInitialized", "fetchAndActivate", "fetchConfig", "getRemoteConfig", "setLogLevel"]
}
