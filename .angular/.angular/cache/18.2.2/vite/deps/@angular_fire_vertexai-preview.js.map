{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/vertexai-preview/dist/esm/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-vertexai-preview.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { __asyncGenerator, __await } from 'tslib';\nvar name = \"@firebase/vertexai-preview\";\nvar version = \"0.0.3\";\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst VERTEX_TYPE = 'vertexAI';\nconst DEFAULT_LOCATION = 'us-central1';\nconst DEFAULT_BASE_URL = 'https://firebaseml.googleapis.com';\nconst DEFAULT_API_VERSION = 'v2beta';\nconst PACKAGE_VERSION = version;\nconst LANGUAGE_TAG = 'gl-js';\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VertexAIService {\n  constructor(app, authProvider, appCheckProvider, options) {\n    var _a;\n    this.app = app;\n    this.options = options;\n    const appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    const auth = authProvider === null || authProvider === void 0 ? void 0 : authProvider.getImmediate({\n      optional: true\n    });\n    this.auth = auth || null;\n    this.appCheck = appCheck || null;\n    this.location = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.location) || DEFAULT_LOCATION;\n  }\n  _delete() {\n    return Promise.resolve();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error class for the Vertex AI for Firebase SDK.\r\n *\r\n * @public\r\n */\nclass VertexAIError extends FirebaseError {\n  /**\r\n   * Constructs a new instance of the `VertexAIError` class.\r\n   *\r\n   * @param code - The error code from {@link VertexAIErrorCode}.\r\n   * @param message - A human-readable message describing the error.\r\n   * @param customErrorData - Optional error data.\r\n   */\n  constructor(code, message, customErrorData) {\n    // Match error format used by FirebaseError from ErrorFactory\n    const service = VERTEX_TYPE;\n    const serviceName = 'VertexAI';\n    const fullCode = `${service}/${code}`;\n    const fullMessage = `${serviceName}: ${message} (${fullCode}).`;\n    super(fullCode, fullMessage);\n    this.code = code;\n    this.message = message;\n    this.customErrorData = customErrorData;\n    // FirebaseError initializes a stack trace, but it assumes the error is created from the error\n    // factory. Since we break this assumption, we set the stack trace to be originating from this\n    // constructor.\n    // This is only supported in V8.\n    if (Error.captureStackTrace) {\n      // Allows us to initialize the stack trace without including the constructor itself at the\n      // top level of the stack trace.\n      Error.captureStackTrace(this, VertexAIError);\n    }\n    // Allows instanceof VertexAIError in ES5/ES6\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, VertexAIError.prototype);\n    // Since Error is an interface, we don't inherit toString and so we define it ourselves.\n    this.toString = () => fullMessage;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Task;\n(function (Task) {\n  Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n  Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n  Task[\"COUNT_TOKENS\"] = \"countTokens\";\n})(Task || (Task = {}));\nclass RequestUrl {\n  constructor(model, task, apiSettings, stream, requestOptions) {\n    this.model = model;\n    this.task = task;\n    this.apiSettings = apiSettings;\n    this.stream = stream;\n    this.requestOptions = requestOptions;\n  }\n  toString() {\n    var _a;\n    // TODO: allow user-set option if that feature becomes available\n    const apiVersion = DEFAULT_API_VERSION;\n    const baseUrl = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.baseUrl) || DEFAULT_BASE_URL;\n    let url = `${baseUrl}/${apiVersion}`;\n    url += `/projects/${this.apiSettings.project}`;\n    url += `/locations/${this.apiSettings.location}`;\n    url += `/${this.model}`;\n    url += `:${this.task}`;\n    if (this.stream) {\n      url += '?alt=sse';\n    }\n    return url;\n  }\n  /**\r\n   * If the model needs to be passed to the backend, it needs to\r\n   * include project and location path.\r\n   */\n  get fullModelString() {\n    let modelString = `projects/${this.apiSettings.project}`;\n    modelString += `/locations/${this.apiSettings.location}`;\n    modelString += `/${this.model}`;\n    return modelString;\n  }\n}\n/**\r\n * Log language and \"fire/version\" to x-goog-api-client\r\n */\nfunction getClientHeaders() {\n  const loggingTags = [];\n  loggingTags.push(`${LANGUAGE_TAG}/${PACKAGE_VERSION}`);\n  loggingTags.push(`fire/${PACKAGE_VERSION}`);\n  return loggingTags.join(' ');\n}\nasync function getHeaders(url) {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('x-goog-api-client', getClientHeaders());\n  headers.append('x-goog-api-key', url.apiSettings.apiKey);\n  if (url.apiSettings.getAppCheckToken) {\n    const appCheckToken = await url.apiSettings.getAppCheckToken();\n    if (appCheckToken && !appCheckToken.error) {\n      headers.append('X-Firebase-AppCheck', appCheckToken.token);\n    }\n  }\n  if (url.apiSettings.getAuthToken) {\n    const authToken = await url.apiSettings.getAuthToken();\n    if (authToken) {\n      headers.append('Authorization', `Firebase ${authToken.accessToken}`);\n    }\n  }\n  return headers;\n}\nasync function constructRequest(model, task, apiSettings, stream, body, requestOptions) {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  return {\n    url: url.toString(),\n    fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), {\n      method: 'POST',\n      headers: await getHeaders(url),\n      body\n    })\n  };\n}\nasync function makeRequest(model, task, apiSettings, stream, body, requestOptions) {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  let response;\n  try {\n    const request = await constructRequest(model, task, apiSettings, stream, body, requestOptions);\n    response = await fetch(request.url, request.fetchOptions);\n    if (!response.ok) {\n      let message = '';\n      let errorDetails;\n      try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n          message += ` ${JSON.stringify(json.error.details)}`;\n          errorDetails = json.error.details;\n        }\n      } catch (e) {\n        // ignored\n      }\n      throw new VertexAIError(\"fetch-error\" /* VertexAIErrorCode.FETCH_ERROR */, `Error fetching from ${url}: [${response.status} ${response.statusText}] ${message}`, {\n        status: response.status,\n        statusText: response.statusText,\n        errorDetails\n      });\n    }\n  } catch (e) {\n    let err = e;\n    if (e.code !== \"fetch-error\" /* VertexAIErrorCode.FETCH_ERROR */ && e instanceof Error) {\n      err = new VertexAIError(\"error\" /* VertexAIErrorCode.ERROR */, `Error fetching from ${url.toString()}: ${e.message}`);\n      err.stack = e.stack;\n    }\n    throw err;\n  }\n  return response;\n}\n/**\r\n * Generates the request options to be passed to the fetch API.\r\n * @param requestOptions - The user-defined request options.\r\n * @returns The generated request options.\r\n */\nfunction buildFetchOptions(requestOptions) {\n  const fetchOptions = {};\n  if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) && (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setTimeout(() => abortController.abort(), requestOptions.timeout);\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Possible roles.\r\n * @public\r\n */\nconst POSSIBLE_ROLES = ['user', 'model', 'function', 'system'];\n/**\r\n * Harm categories that would cause prompts or candidates to be blocked.\r\n * @public\r\n */\nvar HarmCategory;\n(function (HarmCategory) {\n  HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n  HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n  HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n  HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n  HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(HarmCategory || (HarmCategory = {}));\n/**\r\n * Threshold above which a prompt or candidate will be blocked.\r\n * @public\r\n */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n  // Threshold is unspecified.\n  HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n  // Content with NEGLIGIBLE will be allowed.\n  HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n  // Content with NEGLIGIBLE and LOW will be allowed.\n  HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n  // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n  HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n  // All content will be allowed.\n  HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\n/**\r\n * @public\r\n */\nvar HarmBlockMethod;\n(function (HarmBlockMethod) {\n  // The harm block method is unspecified.\n  HarmBlockMethod[\"HARM_BLOCK_METHOD_UNSPECIFIED\"] = \"HARM_BLOCK_METHOD_UNSPECIFIED\";\n  // The harm block method uses both probability and severity scores.\n  HarmBlockMethod[\"SEVERITY\"] = \"SEVERITY\";\n  // The harm block method uses the probability score.\n  HarmBlockMethod[\"PROBABILITY\"] = \"PROBABILITY\";\n})(HarmBlockMethod || (HarmBlockMethod = {}));\n/**\r\n * Probability that a prompt or candidate matches a harm category.\r\n * @public\r\n */\nvar HarmProbability;\n(function (HarmProbability) {\n  // Probability is unspecified.\n  HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n  // Content has a negligible chance of being unsafe.\n  HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n  // Content has a low chance of being unsafe.\n  HarmProbability[\"LOW\"] = \"LOW\";\n  // Content has a medium chance of being unsafe.\n  HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n  // Content has a high chance of being unsafe.\n  HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\n/**\r\n * Harm severity levels.\r\n * @public\r\n */\nvar HarmSeverity;\n(function (HarmSeverity) {\n  // Harm severity unspecified.\n  HarmSeverity[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n  // Negligible level of harm severity.\n  HarmSeverity[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n  // Low level of harm severity.\n  HarmSeverity[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n  // Medium level of harm severity.\n  HarmSeverity[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n  // High level of harm severity.\n  HarmSeverity[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n})(HarmSeverity || (HarmSeverity = {}));\n/**\r\n * Reason that a prompt was blocked.\r\n * @public\r\n */\nvar BlockReason;\n(function (BlockReason) {\n  // A blocked reason was not specified.\n  BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n  // Content was blocked by safety settings.\n  BlockReason[\"SAFETY\"] = \"SAFETY\";\n  // Content was blocked, but the reason is uncategorized.\n  BlockReason[\"OTHER\"] = \"OTHER\";\n})(BlockReason || (BlockReason = {}));\n/**\r\n * Reason that a candidate finished.\r\n * @public\r\n */\nvar FinishReason;\n(function (FinishReason) {\n  // Default value. This value is unused.\n  FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n  // Natural stop point of the model or provided stop sequence.\n  FinishReason[\"STOP\"] = \"STOP\";\n  // The maximum number of tokens as specified in the request was reached.\n  FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n  // The candidate content was flagged for safety reasons.\n  FinishReason[\"SAFETY\"] = \"SAFETY\";\n  // The candidate content was flagged for recitation reasons.\n  FinishReason[\"RECITATION\"] = \"RECITATION\";\n  // Unknown reason.\n  FinishReason[\"OTHER\"] = \"OTHER\";\n})(FinishReason || (FinishReason = {}));\n/**\r\n * @public\r\n */\nvar FunctionCallingMode;\n(function (FunctionCallingMode) {\n  // Unspecified function calling mode. This value should not be used.\n  FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  // Default model behavior, model decides to predict either a function call\n  // or a natural language repspose.\n  FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n  // Model is constrained to always predicting a function call only.\n  // If \"allowed_function_names\" is set, the predicted function call will be\n  // limited to any one of \"allowed_function_names\", else the predicted\n  // function call will be any one of the provided \"function_declarations\".\n  FunctionCallingMode[\"ANY\"] = \"ANY\";\n  // Model will not predict any function call. Model behavior is same as when\n  // not passing any function declarations.\n  FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(FunctionCallingMode || (FunctionCallingMode = {}));\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Contains the list of OpenAPI data types\r\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\r\n * @public\r\n */\nvar FunctionDeclarationSchemaType;\n(function (FunctionDeclarationSchemaType) {\n  /** String type. */\n  FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n  /** Number type. */\n  FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n  /** Integer type. */\n  FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n  /** Boolean type. */\n  FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n  /** Array type. */\n  FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n  /** Object type. */\n  FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(FunctionDeclarationSchemaType || (FunctionDeclarationSchemaType = {}));\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Adds convenience helper methods to a response object, including stream\r\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\r\n */\nfunction addHelpers(response) {\n  response.text = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        console.warn(`This response had ${response.candidates.length} ` + `candidates. Returning text from the first candidate only. ` + `Access response.candidates directly to use the other candidates.`);\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new VertexAIError(\"response-error\" /* VertexAIErrorCode.RESPONSE_ERROR */, `Response error: ${formatBlockErrorMessage(response)}. Response body stored in error.response`, {\n          response\n        });\n      }\n      return getText(response);\n    } else if (response.promptFeedback) {\n      throw new VertexAIError(\"response-error\" /* VertexAIErrorCode.RESPONSE_ERROR */, `Text not available. ${formatBlockErrorMessage(response)}`, {\n        response\n      });\n    }\n    return '';\n  };\n  response.functionCalls = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        console.warn(`This response had ${response.candidates.length} ` + `candidates. Returning function calls from the first candidate only. ` + `Access response.candidates directly to use the other candidates.`);\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new VertexAIError(\"response-error\" /* VertexAIErrorCode.RESPONSE_ERROR */, `Response error: ${formatBlockErrorMessage(response)}. Response body stored in error.response`, {\n          response\n        });\n      }\n      return getFunctionCalls(response);\n    } else if (response.promptFeedback) {\n      throw new VertexAIError(\"response-error\" /* VertexAIErrorCode.RESPONSE_ERROR */, `Function call not available. ${formatBlockErrorMessage(response)}`, {\n        response\n      });\n    }\n    return undefined;\n  };\n  return response;\n}\n/**\r\n * Returns all text found in all parts of first candidate.\r\n */\nfunction getText(response) {\n  var _a, _b, _c, _d;\n  const textStrings = [];\n  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n      if (part.text) {\n        textStrings.push(part.text);\n      }\n    }\n  }\n  if (textStrings.length > 0) {\n    return textStrings.join('');\n  } else {\n    return '';\n  }\n}\n/**\r\n * Returns {@link FunctionCall}s associated with first candidate.\r\n */\nfunction getFunctionCalls(response) {\n  var _a, _b, _c, _d;\n  const functionCalls = [];\n  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n      if (part.functionCall) {\n        functionCalls.push(part.functionCall);\n      }\n    }\n  }\n  if (functionCalls.length > 0) {\n    return functionCalls;\n  } else {\n    return undefined;\n  }\n}\nconst badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];\nfunction hadBadFinishReason(candidate) {\n  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);\n}\nfunction formatBlockErrorMessage(response) {\n  var _a, _b, _c;\n  let message = '';\n  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {\n    message += 'Response was blocked';\n    if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {\n      message += ` due to ${response.promptFeedback.blockReason}`;\n    }\n    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {\n      message += `: ${response.promptFeedback.blockReasonMessage}`;\n    }\n  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n    const firstCandidate = response.candidates[0];\n    if (hadBadFinishReason(firstCandidate)) {\n      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n      if (firstCandidate.finishMessage) {\n        message += `: ${firstCandidate.finishMessage}`;\n      }\n    }\n  }\n  return message;\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\r\n * Process a response.body stream from the backend and return an\r\n * iterator that provides one complete GenerateContentResponse at a time\r\n * and a promise that resolves with a single aggregated\r\n * GenerateContentResponse.\r\n *\r\n * @param response - Response from a fetch call\r\n */\nfunction processStream(response) {\n  const inputStream = response.body.pipeThrough(new TextDecoderStream('utf8', {\n    fatal: true\n  }));\n  const responseStream = getResponseStream(inputStream);\n  const [stream1, stream2] = responseStream.tee();\n  return {\n    stream: generateResponseSequence(stream1),\n    response: getResponsePromise(stream2)\n  };\n}\nasync function getResponsePromise(stream) {\n  const allResponses = [];\n  const reader = stream.getReader();\n  while (true) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done) {\n      return addHelpers(aggregateResponses(allResponses));\n    }\n    allResponses.push(value);\n  }\n}\nfunction generateResponseSequence(stream) {\n  return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n    const reader = stream.getReader();\n    while (true) {\n      const {\n        value,\n        done\n      } = yield __await(reader.read());\n      if (done) {\n        break;\n      }\n      yield yield __await(addHelpers(value));\n    }\n  });\n}\n/**\r\n * Reads a raw stream from the fetch response and join incomplete\r\n * chunks, returning a new stream that provides a single complete\r\n * GenerateContentResponse in each iteration.\r\n */\nfunction getResponseStream(inputStream) {\n  const reader = inputStream.getReader();\n  const stream = new ReadableStream({\n    start(controller) {\n      let currentText = '';\n      return pump();\n      function pump() {\n        return reader.read().then(({\n          value,\n          done\n        }) => {\n          if (done) {\n            if (currentText.trim()) {\n              controller.error(new VertexAIError(\"parse-failed\" /* VertexAIErrorCode.PARSE_FAILED */, 'Failed to parse stream'));\n              return;\n            }\n            controller.close();\n            return;\n          }\n          currentText += value;\n          let match = currentText.match(responseLineRE);\n          let parsedResponse;\n          while (match) {\n            try {\n              parsedResponse = JSON.parse(match[1]);\n            } catch (e) {\n              controller.error(new VertexAIError(\"parse-failed\" /* VertexAIErrorCode.PARSE_FAILED */, `Error parsing JSON response: \"${match[1]}`));\n              return;\n            }\n            controller.enqueue(parsedResponse);\n            currentText = currentText.substring(match[0].length);\n            match = currentText.match(responseLineRE);\n          }\n          return pump();\n        });\n      }\n    }\n  });\n  return stream;\n}\n/**\r\n * Aggregates an array of `GenerateContentResponse`s into a single\r\n * GenerateContentResponse.\r\n */\nfunction aggregateResponses(responses) {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse = {\n    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      for (const candidate of response.candidates) {\n        const i = candidate.index;\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[i]) {\n          aggregatedResponse.candidates[i] = {\n            index: candidate.index\n          };\n        }\n        // Keep overwriting, the last one will be final\n        aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;\n        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n        aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;\n        aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;\n        /**\r\n         * Candidates should always have content and parts, but this handles\r\n         * possible malformed responses.\r\n         */\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[i].content) {\n            aggregatedResponse.candidates[i].content = {\n              role: candidate.content.role || 'user',\n              parts: []\n            };\n          }\n          const newPart = {};\n          for (const part of candidate.content.parts) {\n            if (part.text) {\n              newPart.text = part.text;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (Object.keys(newPart).length === 0) {\n              newPart.text = '';\n            }\n            aggregatedResponse.candidates[i].content.parts.push(newPart);\n          }\n        }\n      }\n    }\n  }\n  return aggregatedResponse;\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function generateContentStream(apiSettings, model, params, requestOptions) {\n  const response = await makeRequest(model, Task.STREAM_GENERATE_CONTENT, apiSettings, /* stream */true, JSON.stringify(params), requestOptions);\n  return processStream(response);\n}\nasync function generateContent(apiSettings, model, params, requestOptions) {\n  const response = await makeRequest(model, Task.GENERATE_CONTENT, apiSettings, /* stream */false, JSON.stringify(params), requestOptions);\n  const responseJson = await response.json();\n  const enhancedResponse = addHelpers(responseJson);\n  return {\n    response: enhancedResponse\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction formatSystemInstruction(input) {\n  // null or undefined\n  if (input == null) {\n    return undefined;\n  } else if (typeof input === 'string') {\n    return {\n      role: 'system',\n      parts: [{\n        text: input\n      }]\n    };\n  } else if (input.text) {\n    return {\n      role: 'system',\n      parts: [input]\n    };\n  } else if (input.parts) {\n    if (!input.role) {\n      return {\n        role: 'system',\n        parts: input.parts\n      };\n    } else {\n      return input;\n    }\n  }\n}\nfunction formatNewContent(request) {\n  let newParts = [];\n  if (typeof request === 'string') {\n    newParts = [{\n      text: request\n    }];\n  } else {\n    for (const partOrString of request) {\n      if (typeof partOrString === 'string') {\n        newParts.push({\n          text: partOrString\n        });\n      } else {\n        newParts.push(partOrString);\n      }\n    }\n  }\n  return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\r\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\r\n * passed in a single Part array, we may need to assign different roles to each\r\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\r\n * @private\r\n * @param parts Array of parts to pass to the model\r\n * @returns Array of content items\r\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n  const userContent = {\n    role: 'user',\n    parts: []\n  };\n  const functionContent = {\n    role: 'function',\n    parts: []\n  };\n  let hasUserContent = false;\n  let hasFunctionContent = false;\n  for (const part of parts) {\n    if ('functionResponse' in part) {\n      functionContent.parts.push(part);\n      hasFunctionContent = true;\n    } else {\n      userContent.parts.push(part);\n      hasUserContent = true;\n    }\n  }\n  if (hasUserContent && hasFunctionContent) {\n    throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, 'Within a single message, FunctionResponse cannot be mixed with other type of Part in the request for sending chat message.');\n  }\n  if (!hasUserContent && !hasFunctionContent) {\n    throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, 'No Content is provided for sending chat message.');\n  }\n  if (hasUserContent) {\n    return userContent;\n  }\n  return functionContent;\n}\nfunction formatGenerateContentInput(params) {\n  let formattedRequest;\n  if (params.contents) {\n    formattedRequest = params;\n  } else {\n    // Array or string\n    const content = formatNewContent(params);\n    formattedRequest = {\n      contents: [content]\n    };\n  }\n  if (params.systemInstruction) {\n    formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);\n  }\n  return formattedRequest;\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// https://ai.google.dev/api/rest/v1beta/Content#part\nconst VALID_PART_FIELDS = ['text', 'inlineData', 'functionCall', 'functionResponse'];\nconst VALID_PARTS_PER_ROLE = {\n  user: ['text', 'inlineData'],\n  function: ['functionResponse'],\n  model: ['text', 'functionCall'],\n  // System instructions shouldn't be in history anyway.\n  system: ['text']\n};\nconst VALID_PREVIOUS_CONTENT_ROLES = {\n  user: ['model'],\n  function: ['model'],\n  model: ['user', 'function'],\n  // System instructions shouldn't be in history.\n  system: []\n};\nfunction validateChatHistory(history) {\n  let prevContent = null;\n  for (const currContent of history) {\n    const {\n      role,\n      parts\n    } = currContent;\n    if (!prevContent && role !== 'user') {\n      throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `First Content should be with role 'user', got ${role}`);\n    }\n    if (!POSSIBLE_ROLES.includes(role)) {\n      throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);\n    }\n    if (!Array.isArray(parts)) {\n      throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `Content should have 'parts' but property with an array of Parts`);\n    }\n    if (parts.length === 0) {\n      throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `Each Content should have at least one part`);\n    }\n    const countFields = {\n      text: 0,\n      inlineData: 0,\n      functionCall: 0,\n      functionResponse: 0\n    };\n    for (const part of parts) {\n      for (const key of VALID_PART_FIELDS) {\n        if (key in part) {\n          countFields[key] += 1;\n        }\n      }\n    }\n    const validParts = VALID_PARTS_PER_ROLE[role];\n    for (const key of VALID_PART_FIELDS) {\n      if (!validParts.includes(key) && countFields[key] > 0) {\n        throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `Content with role '${role}' can't contain '${key}' part`);\n      }\n    }\n    if (prevContent) {\n      const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];\n      if (!validPreviousContentRoles.includes(prevContent.role)) {\n        throw new VertexAIError(\"invalid-content\" /* VertexAIErrorCode.INVALID_CONTENT */, `Content with role '${role} can't follow '${prevContent.role}'. Valid previous roles: ${JSON.stringify(VALID_PREVIOUS_CONTENT_ROLES)}`);\n      }\n    }\n    prevContent = currContent;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Do not log a message for this error.\r\n */\nconst SILENT_ERROR = 'SILENT_ERROR';\n/**\r\n * ChatSession class that enables sending chat messages and stores\r\n * history of sent and received messages so far.\r\n *\r\n * @public\r\n */\nclass ChatSession {\n  constructor(apiSettings, model, params, requestOptions) {\n    this.model = model;\n    this.params = params;\n    this.requestOptions = requestOptions;\n    this._history = [];\n    this._sendPromise = Promise.resolve();\n    this._apiSettings = apiSettings;\n    if (params === null || params === void 0 ? void 0 : params.history) {\n      validateChatHistory(params.history);\n      this._history = params.history;\n    }\n  }\n  /**\r\n   * Gets the chat history so far. Blocked prompts are not added to history.\r\n   * Blocked candidates are not added to history, nor are the prompts that\r\n   * generated them.\r\n   */\n  async getHistory() {\n    await this._sendPromise;\n    return this._history;\n  }\n  /**\r\n   * Sends a chat message and receives a non-streaming\r\n   * {@link GenerateContentResult}\r\n   */\n  async sendMessage(request) {\n    var _a, _b, _c, _d, _e;\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest = {\n      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    let finalResult = {};\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise.then(() => generateContent(this._apiSettings, this.model, generateContentRequest, this.requestOptions)).then(result => {\n      var _a, _b;\n      if (result.response.candidates && result.response.candidates.length > 0) {\n        this._history.push(newContent);\n        const responseContent = {\n          parts: ((_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content.parts) || [],\n          // Response seems to come back without a role set.\n          role: ((_b = result.response.candidates) === null || _b === void 0 ? void 0 : _b[0].content.role) || 'model'\n        };\n        this._history.push(responseContent);\n      } else {\n        const blockErrorMessage = formatBlockErrorMessage(result.response);\n        if (blockErrorMessage) {\n          console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n        }\n      }\n      finalResult = result;\n    });\n    await this._sendPromise;\n    return finalResult;\n  }\n  /**\r\n   * Sends a chat message and receives the response as a\r\n   * {@link GenerateContentStreamResult} containing an iterable stream\r\n   * and a response promise.\r\n   */\n  async sendMessageStream(request) {\n    var _a, _b, _c, _d, _e;\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest = {\n      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    const streamPromise = generateContentStream(this._apiSettings, this.model, generateContentRequest, this.requestOptions);\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise.then(() => streamPromise)\n    // This must be handled to avoid unhandled rejection, but jump\n    // to the final catch block with a label to not log this error.\n    .catch(_ignored => {\n      throw new Error(SILENT_ERROR);\n    }).then(streamResult => streamResult.response).then(response => {\n      if (response.candidates && response.candidates.length > 0) {\n        this._history.push(newContent);\n        const responseContent = Object.assign({}, response.candidates[0].content);\n        // Response seems to come back without a role set.\n        if (!responseContent.role) {\n          responseContent.role = 'model';\n        }\n        this._history.push(responseContent);\n      } else {\n        const blockErrorMessage = formatBlockErrorMessage(response);\n        if (blockErrorMessage) {\n          console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n        }\n      }\n    }).catch(e => {\n      // Errors in streamPromise are already catchable by the user as\n      // streamPromise is returned.\n      // Avoid duplicating the error message in logs.\n      if (e.message !== SILENT_ERROR) {\n        // Users do not have access to _sendPromise to catch errors\n        // downstream from streamPromise, so they should not throw.\n        console.error(e);\n      }\n    });\n    return streamPromise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function countTokens(apiSettings, model, params, requestOptions) {\n  const response = await makeRequest(model, Task.COUNT_TOKENS, apiSettings, false, JSON.stringify(params), requestOptions);\n  return response.json();\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class for generative model APIs.\r\n * @public\r\n */\nclass GenerativeModel {\n  constructor(vertexAI, modelParams, requestOptions) {\n    var _a, _b, _c, _d;\n    if (!((_b = (_a = vertexAI.app) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.apiKey)) {\n      throw new VertexAIError(\"no-api-key\" /* VertexAIErrorCode.NO_API_KEY */, `The \"apiKey\" field is empty in the local Firebase config. Firebase VertexAI requires this field to contain a valid API key.`);\n    } else if (!((_d = (_c = vertexAI.app) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.projectId)) {\n      throw new VertexAIError(\"no-project-id\" /* VertexAIErrorCode.NO_PROJECT_ID */, `The \"projectId\" field is empty in the local Firebase config. Firebase VertexAI requires this field to contain a valid project ID.`);\n    } else {\n      this._apiSettings = {\n        apiKey: vertexAI.app.options.apiKey,\n        project: vertexAI.app.options.projectId,\n        location: vertexAI.location\n      };\n      if (vertexAI.appCheck) {\n        this._apiSettings.getAppCheckToken = () => vertexAI.appCheck.getToken();\n      }\n      if (vertexAI.auth) {\n        this._apiSettings.getAuthToken = () => vertexAI.auth.getToken();\n      }\n    }\n    if (modelParams.model.includes('/')) {\n      if (modelParams.model.startsWith('models/')) {\n        // Add \"publishers/google\" if the user is only passing in 'models/model-name'.\n        this.model = `publishers/google/${modelParams.model}`;\n      } else {\n        // Any other custom format (e.g. tuned models) must be passed in correctly.\n        this.model = modelParams.model;\n      }\n    } else {\n      // If path is not included, assume it's a non-tuned model.\n      this.model = `publishers/google/models/${modelParams.model}`;\n    }\n    this.generationConfig = modelParams.generationConfig || {};\n    this.safetySettings = modelParams.safetySettings || [];\n    this.tools = modelParams.tools;\n    this.toolConfig = modelParams.toolConfig;\n    this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);\n    this.requestOptions = requestOptions || {};\n  }\n  /**\r\n   * Makes a single non-streaming call to the model\r\n   * and returns an object containing a single {@link GenerateContentResponse}.\r\n   */\n  async generateContent(request) {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContent(this._apiSettings, this.model, Object.assign({\n      generationConfig: this.generationConfig,\n      safetySettings: this.safetySettings,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction\n    }, formattedParams), this.requestOptions);\n  }\n  /**\r\n   * Makes a single streaming call to the model\r\n   * and returns an object containing an iterable stream that iterates\r\n   * over all chunks in the streaming response as well as\r\n   * a promise that returns the final aggregated response.\r\n   */\n  async generateContentStream(request) {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContentStream(this._apiSettings, this.model, Object.assign({\n      generationConfig: this.generationConfig,\n      safetySettings: this.safetySettings,\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction\n    }, formattedParams), this.requestOptions);\n  }\n  /**\r\n   * Gets a new {@link ChatSession} instance which can be used for\r\n   * multi-turn chats.\r\n   */\n  startChat(startChatParams) {\n    return new ChatSession(this._apiSettings, this.model, Object.assign({\n      tools: this.tools,\n      toolConfig: this.toolConfig,\n      systemInstruction: this.systemInstruction\n    }, startChatParams), this.requestOptions);\n  }\n  /**\r\n   * Counts the tokens in the provided request.\r\n   */\n  async countTokens(request) {\n    const formattedParams = formatGenerateContentInput(request);\n    return countTokens(this._apiSettings, this.model, formattedParams);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a {@link VertexAI} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getVertexAI(app = getApp(), options) {\n  app = getModularInstance(app);\n  // Dependencies\n  const vertexProvider = _getProvider(app, VERTEX_TYPE);\n  return vertexProvider.getImmediate({\n    identifier: (options === null || options === void 0 ? void 0 : options.location) || DEFAULT_LOCATION\n  });\n}\n/**\r\n * Returns a {@link GenerativeModel} class with methods for inference\r\n * and other functionality.\r\n *\r\n * @public\r\n */\nfunction getGenerativeModel(vertexAI, modelParams, requestOptions) {\n  if (!modelParams.model) {\n    throw new VertexAIError(\"no-model\" /* VertexAIErrorCode.NO_MODEL */, `Must provide a model name. Example: getGenerativeModel({ model: 'my-model-name' })`);\n  }\n  return new GenerativeModel(vertexAI, modelParams, requestOptions);\n}\n\n/**\r\n * The Vertex AI For Firebase Web SDK.\r\n *\r\n * @packageDocumentation\r\n */\nfunction registerVertex() {\n  _registerComponent(new Component(VERTEX_TYPE, (container, {\n    instanceIdentifier: location\n  }) => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const auth = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return new VertexAIService(app, auth, appCheckProvider, {\n      location\n    });\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterVertex();\nexport { BlockReason, ChatSession, FinishReason, FunctionCallingMode, FunctionDeclarationSchemaType, GenerativeModel, HarmBlockMethod, HarmBlockThreshold, HarmCategory, HarmProbability, HarmSeverity, POSSIBLE_ROLES, VertexAIError, getGenerativeModel, getVertexAI };\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getVertexAI as getVertexAI$1, getGenerativeModel as getGenerativeModel$1 } from 'firebase/vertexai-preview';\nexport * from 'firebase/vertexai-preview';\nclass VertexAI {\n  constructor(vertexai) {\n    return vertexai;\n  }\n}\nconst VERTEX_AI_PROVIDER_NAME = 'vertexai';\nclass VertexAIInstances {\n  constructor() {\n    return _getAllInstancesOf(VERTEX_AI_PROVIDER_NAME);\n  }\n}\nconst vertexAIInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(VERTEX_AI_PROVIDER_NAME))), distinct());\nconst PROVIDED_VERTEX_AI_INSTANCES = new InjectionToken('angularfire2.vertexai-instances');\nfunction defaultVertexAIInstanceFactory(provided, defaultApp) {\n  const defaultVertexAI = _getDefaultInstanceOf(VERTEX_AI_PROVIDER_NAME, provided, defaultApp);\n  return defaultVertexAI && new VertexAI(defaultVertexAI);\n}\nfunction vertexAIInstanceFactory(fn) {\n  return (zone, injector) => {\n    const vertexAI = zone.runOutsideAngular(() => fn(injector));\n    return new VertexAI(vertexAI);\n  };\n}\nconst VERTEX_AI_INSTANCES_PROVIDER = {\n  provide: VertexAIInstances,\n  deps: [[new Optional(), PROVIDED_VERTEX_AI_INSTANCES]]\n};\nconst DEFAULT_VERTEX_AI_INSTANCE_PROVIDER = {\n  provide: VertexAI,\n  useFactory: defaultVertexAIInstanceFactory,\n  deps: [[new Optional(), PROVIDED_VERTEX_AI_INSTANCES], FirebaseApp]\n};\nclass VertexAIModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'vertexai');\n  }\n  static ɵfac = function VertexAIModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || VertexAIModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: VertexAIModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_VERTEX_AI_INSTANCE_PROVIDER, VERTEX_AI_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VertexAIModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_VERTEX_AI_INSTANCE_PROVIDER, VERTEX_AI_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideVertexAI(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'vertexai');\n  return makeEnvironmentProviders([DEFAULT_VERTEX_AI_INSTANCE_PROVIDER, VERTEX_AI_INSTANCES_PROVIDER, {\n    provide: PROVIDED_VERTEX_AI_INSTANCES,\n    useFactory: vertexAIInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getVertexAI = _zoneWrap(getVertexAI$1, true);\nconst getGenerativeModel = _zoneWrap(getGenerativeModel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { VertexAI, VertexAIInstances, VertexAIModule, getGenerativeModel, getVertexAI, provideVertexAI, vertexAIInstance$ };\n"],
  "mappings": "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",
  "names": ["Task", "HarmCategory", "HarmBlockThreshold", "HarmBlockMethod", "HarmProbability", "HarmSeverity", "BlockReason", "FinishReason", "FunctionCallingMode", "FunctionDeclarationSchemaType", "_a", "_b", "getVertexAI", "getGenerativeModel"]
}
